# deploys a lightweight LGTM stack for local monitoring.
# if you need light_er_, you can add .services[*].deploy.resources to limit cpu/ram
#
# all components are configured for single-player local mode.
# broadly speaking, this means no auth, no svc clustering, and local/file storage
services:

  # exposes authless grafana ui on http://localhost:3000
  grafana:
    image: grafana/grafana:11.5.1
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./config/grafana.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - loki
      - mimir
      - tempo
      - pyroscope
      - alloy

  # alloy is grafana's take on otel collector. it routes telemetry signals to the correct backend, with pipeline support
  # exposes an admin/monitoring ui on http://localhost:12345/
  # telemetry pipeline listens for grpc on localhost:4317
  alloy:
    image: grafana/alloy:v1.6.1
    command:
      - "run"
      - "--server.http.listen-addr=0.0.0.0:12345"
      - "--storage.path=/var/lib/alloy/data"
      - "--stability.level=public-preview" # allow pyroscope, not yet GA
      - "/etc/alloy/local.alloy"
    ports:
      - "12345:12345"   # internal debug
      - "4317:4317"     # otlp grpc
      - "4318:4318"     # otlp http
      - "4040:4040"     # pyroscope http
    volumes:
      - ./config/alloy.alloy:/etc/alloy/local.alloy

  # loki is loki. it holds logs
  loki:
    image: grafana/loki:3.1.2
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yaml:/etc/loki/local-config.yaml
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_AGENT_PORT=6831
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1

  # mimir is mimir. it holds metrics
  # exposes admin/monitoring on http://localhost:9009/
  mimir:
    image: grafana/mimir:2.14.3
    command: --config.file=/etc/mimir/local-config.yaml
    ports:
      - "9009:9009"
    volumes:
      - ./config/mimir.yaml:/etc/mimir/local-config.yaml
      - mimir-data:/data
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_AGENT_PORT=6831

  # tempo is tempo. it holds traces
  tempo:
    image: grafana/tempo:2.7.0
    command: -config.file=/etc/tempo/local-config.yaml
    ports:
      - "3200:3200"   # tempo
      #- "4317:4317"   # otlp grpc (internal)
      #- "4318:4318"   # otlp http (internal)
    volumes:
      - ./config/tempo.yaml:/etc/tempo/local-config.yaml
      - tempo-data:/tmp/tempo

  # pyroscope for continuous profiling
  pyroscope:
    image: grafana/pyroscope:latest
    # ports: [ "4040:4040" ]

  # promtail reads system logs and pushes them to loki.
  # to effectively monitor localhost docker containers' stdout logs, the docker daemon must use file logging.
  # using otel-native logging in the app domain, though, pushes directly through alloy to loki
  promtail:
    image: grafana/promtail:3.1.2
    volumes:
      - ./config/promtail.yaml:/etc/promtail/config.yaml
      # system logs path
      - /var/log:/var/log
      # privileged: mount docker socket to read container logs.
      # this can be removed if container logs aren't needed, but also remove the relevant scrape config from promtail.yaml
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml

volumes:
  grafana-storage:
  mimir-data:
  tempo-data: